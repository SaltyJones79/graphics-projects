/* 
Programer: Jeremy Saltz
This program draws a fern from 500,000 points generated by the 
Iterated Function System. After the fern has been rendered the user can
click the screen to change the fern to a second fern and change the color
with the press of the 'c' key. The fern will stay this color as it changes shape 
and can have its color changed in either shape.
 */

// variable for points, webGl, number of points, fern shapes, and fern color
var gl,
  program,
  pointsOne = [], // store points for one fern
  pointsTwo = []; // store points for other fern
var NumPoints = 500000; // number of points to draw
var changeFern = 1; // fern shape
var color = 1; // color of the fern

function main() {
  // gets reference to an HTML canvas element maked "gl-canvas"
  canvas = document.getElementById("gl-canvas");

  // assigns the initialized WebGL context to the 'gl' variable
  gl = WebGLUtils.setupWebGL(canvas);
  if (!gl) {
    alert("WebGL isn't available");
  }

  // number of points to generate the starting point
  var numStartPoints = 10;
  var firstPoint = []; //stores the first point
  firstPoint = new vec2(0, 0); // a vector at the origin

  // sesnds throught the origin and how many points to generate the start point
  generateStartPoint(firstPoint, numStartPoints);

  // generates points for both ferns
  GeneratePoints(pointsOne[0], pointsTwo[0]);

  // scales points for the first rendering
  //scalePoints(pointsOne);

  //  Load shaders and initialize attribute buffers
  console.log("WebGL Context:", gl);

  //  Configure WebGL
  gl.viewport(0, 0, canvas.width, canvas.height);
  gl.clearColor(67/255, 23/255, 94/255, 1.0); // set color of canvas
  program = initShaders(gl, "vertex-shader", "fragment-shader");
  if (!program) {
    console.log("Failed to initialize shaders.");
    var error = gl.getShaderInfoLog(program);
    console.error("Shader compilation error:", error);
    return;
  }
  gl.useProgram(program);

  // Set the point size in the vertex shader
  var pointSize = 0.1; // Adjust this value to change the point size
  var pointSizeLocation = gl.getUniformLocation(program, "pointSize");
  gl.uniform1f(pointSizeLocation, pointSize);

  // Load the data into the GPU
  var bufferId = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, bufferId);
  gl.bufferData(gl.ARRAY_BUFFER, flatten(pointsOne), gl.STATIC_DRAW);

  // Associate out shader variables with our data buffer
  var vPosition = gl.getAttribLocation(program, "vPosition");
  gl.vertexAttribPointer(vPosition, 2, gl.FLOAT, false, 0, 0);
  gl.enableVertexAttribArray(vPosition);

  // an event in the window to listen for the mouse to pressed down
  window.addEventListener("mousedown", function () {
    // if the fern is 1 change to 0 to render the other fern
    if (changeFern == 1) {
      changeFern = 0; // sets to other fern
      // loads the fern to the array buffer
      gl.bufferData(gl.ARRAY_BUFFER, flatten(pointsTwo), gl.STATIC_DRAW);
    } else {
      changeFern = 1; // changes fern
      // loads the fern to the buffer
      gl.bufferData(gl.ARRAY_BUFFER, flatten(pointsOne), gl.STATIC_DRAW);
    }

    render(); // renders the fern
  });

  // changes the color of the fern when 'c' is pressed
  window.addEventListener("keydown", function () {
    // if 'c' is pressed changes the color
    if (this.event.keyCode == 67) {
      if (color == 1) {
        color = 0; // sets the color of the fern
      } else {
        color = 1; // sets the color of the fern
      }
      render(); //renders the fern
    }
  });

  render(); // renders the fern
}

// function to generate the starting point of the ferns
function generateStartPoint(point, NumStart) {
  var newPoint = []; // to store the new point generated

  // table of values for one fern
  var fernOneCoeff = [
    [0.0, 0.2, -0.15, 0.75],
    [0.0, -0.26, 0.28, 0.04],
    [0.0, 0.23, 0.26, -0.04],
    [0.16, 0.22, 0.24, 0.85],
    [0.0, 0.0, 0.0, 0.0],
    [0.0, 1.6, 0.44, 1.6],
  ];

  // table of values for the other fern
  var fernTwoCoeff = [
    [0.0, 0.2, -0.15, 0.85],
    [0.0, -0.26, 0.28, 0.04],
    [0.0, 0.23, 0.26, -0.04],
    [0.16, 0.22, 0.24, 0.85],
    [0.0, 0.0, 0.0, 0.0],
    [0.0, 1.6, 0.44, 1.6],
  ];

  // loop to calculate start point for the other fern
  for (let i = 0; i < NumStart; i++) {
    var pVal = Math.random();// gets the pValue for the fern table

    var set = setChoiceOne(pVal);// sets the column to get coeffitiants

    // calculates both x and y points for a new point
    newPoint[0] =
      fernTwoCoeff[0][set] * point[0] +
      fernTwoCoeff[1][set] * point[1] +
      fernTwoCoeff[4][set];
    newPoint[1] =
      fernTwoCoeff[2][set] * point[0] +
      fernTwoCoeff[3][set] * point[1] +
      fernTwoCoeff[5][set];

    point = newPoint;// sets current point to the new point for the next iteration
  }
  pointsTwo.push(point);// pushes point on to fernTwo array for the first point

  point = new vec2(0.0, 0.0);// sets point back to origin

  for (let i = 0; i < NumStart; i++) {
    var pVal = Math.random();// gets a pValue

    var set = setChoiceOne(pVal);// sets the coeff column

    // maths for x and y start point
    newPoint[0] =
      fernOneCoeff[0][set] * point[0] +
      fernOneCoeff[1][set] * point[1] +
      fernOneCoeff[4][set];
    newPoint[1] =
      fernOneCoeff[2][set] * point[0] +
      fernOneCoeff[3][set] * point[1] +
      fernOneCoeff[5][set];

    point = newPoint;// sets up last point as new point for next iteration
  }
  pointsOne.push(point);// pushes the point on to the other fern array
}

// this function generates the points for both ferns and stores them in thier arrays
function GeneratePoints(startPointOne, startPointTwo) {
  var lastPointOne = vec2(); // Initialize lastPoint as a vec2
  lastPointOne[0] = startPointOne[0];// x point for one fern
  lastPointOne[1] = startPointOne[1];// y point for one fern

  var lastPointTwo = vec2(); // Initialize lastPoint as a vec2
  lastPointTwo[0] = startPointTwo[0]; // x point for other fern
  lastPointTwo[1] = startPointTwo[1];// y ppoint for other fern

  // coeff table for one fern
  var fernOneCoeff = [
    [0.0, 0.2, -0.15, 0.75],
    [0.0, -0.26, 0.28, 0.04],
    [0.0, 0.23, 0.26, -0.04],
    [0.16, 0.22, 0.24, 0.85],
    [0.0, 0.0, 0.0, 0.0],
    [0.0, 1.6, 0.44, 1.6],
  ];

  // coeff table for other fern
  var fernTwoCoeff = [
    [0.0, 0.2, -0.15, 0.85],
    [0.0, -0.26, 0.28, 0.04],
    [0.0, 0.23, 0.26, -0.04],
    [0.16, 0.22, 0.24, 0.85],
    [0.0, 0.0, 0.0, 0.0],
    [0.0, 1.6, 0.44, 1.6],
  ];

  // loop to generate points for a fern and then push it onto the matching fern array
  for (let i = 0; i < NumPoints; i++) {
    var pVal = Math.random();// gets a pVal

    var set = setChoiceTwo(pVal);// gets a colomn for table coeff

    var nextPoint = vec2(); // Initialize nextPoint as a vec2

    // maths to generate points based on table of coeffs
    nextPoint[0] =
      fernTwoCoeff[0][set] * lastPointTwo[0] +
      fernTwoCoeff[1][set] * lastPointTwo[1] +
      fernTwoCoeff[4][set];
    nextPoint[1] =
      fernTwoCoeff[2][set] * lastPointTwo[0] +
      fernTwoCoeff[3][set] * lastPointTwo[1] +
      fernTwoCoeff[5][set];

    lastPointTwo[0] = nextPoint[0];// stores point for next interation
    lastPointTwo[1] = nextPoint[1];// stores point for next interation

    pointsTwo.push(vec2(nextPoint[0], nextPoint[1]));// push it on to the array
  }
  
  scalePoints(pointsTwo);// scales the 
  for (let i = 0; i < NumPoints; i++) {
    var pVal = Math.random();// pVal

    var set = setChoiceOne(pVal);// coeff from table

    var nextPoint = vec2(); // Initialize nextPoint as a vec2

    // maths like the loop before
    nextPoint[0] =
      fernOneCoeff[0][set] * lastPointOne[0] +
      fernOneCoeff[1][set] * lastPointOne[1] +
      fernOneCoeff[4][set];
    nextPoint[1] =
      fernOneCoeff[2][set] * lastPointOne[0] +
      fernOneCoeff[3][set] * lastPointOne[1] +
      fernOneCoeff[5][set];

    lastPointOne[0] = nextPoint[0];// for next interation
    lastPointOne[1] = nextPoint[1];// like above

    // push it on the array for me
    pointsOne.push(vec2(nextPoint[0], nextPoint[1]));
  }
  scalePoints(pointsOne);// scaling it to fit will you
}

// a function to scale the points to fit in the clipping cordinates
function scalePoints(pointArray) {
  // Find the minimum and maximum values for x and y
  let xmin = Infinity;
  let xmax = -Infinity;
  let ymin = Infinity;
  let ymax = -Infinity;

  // Find the minimum and maximum values for x and y
  pointArray.forEach((point) => {
    xmin = Math.min(xmin, point[0]);
    xmax = Math.max(xmax, point[0]);
    ymin = Math.min(ymin, point[1]);
    ymax = Math.max(ymax, point[1]);
  });

  // Calculate the range for x and y
  const xrange = xmax - xmin;
  const yrange = ymax - ymin;

  // Scale the values to fit within [-1, 1]
  pointArray.forEach((point) => {
    point[0] = (2 * ((point[0] - xmin) / xrange) - 1) * 0.9;
    point[1] = (2 * ((point[1] - ymin) / yrange) - 1) * 0.8;
  });
}

// returns the set number for the column index of the cooeff table
function setChoiceOne(pVal) {
  var setNum;
  if (pVal > 0.26) {
    setNum = 3;
  } else if (pVal > 0.18 && pVal <= 0.26) {
    setNum = 2;
  } else if (pVal > 0.1 && pVal <= 0.18) {
    setNum = 1;
  } else {
    setNum = 0;
  }
  return setNum;
}

// returns the set number for the column index of the cooeff table
function setChoiceTwo(pVal) {
  var setNum;
  if (pVal > 0.15) {
    setNum = 3;
  } else if (pVal > 0.08 && pVal <= 0.15) {
    setNum = 2;
  } else if (pVal > 0.01 && pVal <= 0.08) {
    setNum = 1;
  } else {
    setNum = 0;
  }
  return setNum;
}

// render that pleasing fern!!!! 
function render() {
  // clears the canvas color
  gl.clear(gl.COLOR_BUFFER_BIT);
  gl.uniform1i(gl.getUniformLocation(program, "colorIndex"), color);
  // draws the points in green color
  gl.drawArrays(gl.POINTS, 0, pointsOne.length);
}
